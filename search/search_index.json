{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to OpenLUST","text":"<p>In an age where technology permeates every aspect of our lives, why should our most intimate moments remain untouched?</p> <p>Welcome to OpenLUST \u2013 an acronym for Love Unleashing Sensual Technologies. Our mission is not just to design a product, but to craft experiences, enhancing sensuality and intimacy with the precision and safety that only technology can offer.</p> <p>As we embark on our journey to develop the most sophisticated firmware for LUST toys, we invite you to join us. Together, we can merge human intuition with technological innovation, redefining pleasure for the digital age. Embrace the future of intimacy with OpenLUST.</p>"},{"location":"#github","title":"Github","text":"<p>Link to our Github Projects</p>"},{"location":"lustmotion-API/","title":"Remote Control API","text":""},{"location":"lustmotion-API/#mdns","title":"MDNS","text":"<p>LUST-motion is discoverable by MDNS services und advertises a <code>stroking</code> service. This can be used to identify the device on the local network and establish connections with it. The following service texts provide further information:</p> Text Information FirmwareVersion Currently used firmware version to adjust for API versions and capabilities DeviceID Unique device ID"},{"location":"lustmotion-API/#stateful-services","title":"Stateful Services","text":"<p>Stateful services offer direct control over the machine and can be reached via a RESTful API. Some stateful services are also offered through a websocket server or MQTT. All changes are internally synchronized and propagated back to all clients. Redundant messages which do not change any internal state are filtered out and not propagated.</p> <p>\u26a0\ufe0f IMPORTANT: There is a rate limit to these updates. You should avoid more then 10 Hz, otherwise the API might become unstable and could cause a fatal crash.</p>"},{"location":"lustmotion-API/#strokeengine-control","title":"StrokeEngine Control","text":"<p>The main control API to control LUST-motion. Starts and stops the motion, changes the main parameters depth, stroke, speed and sensation. Also allows the selection of a pattern, or if the streaming interfaces should be used as input source for the motion generation. In addition it provides the possibility to override the vibration overlay with fixed costume values. If enabled, vibration commands from pattern or streaming are ignored.</p> <p>Defined in <code>StrokeEngineControlService.h</code></p> Method URL Authentication GET /rest/control <code>NONE_REQUIRED</code> POST /rest/control <code>NONE_REQUIRED</code> WS /ws/control <code>NONE_REQUIRED</code> MQTT - N/A Parameter Type Range Info Failure Mode command string {command} Controls the machine like start a pattern, activate streaming or stop it. Commands are not case sensitive STOP depth number 0.0 - <code>travel</code> maximum depth of the motion truncated into range stroke number 0.0 - <code>travel</code> length of the stroke truncated into range rate number 0.0 - <code>max_rate</code> rate in strokes per minute truncated into range sensation number -100.0 - +100.0 affects the feeling of a pattern truncated into range pattern string - name of a pattern in the pattern array returned by StrokeEngine Environment API ignored vibration_override boolean true / false overrides the vibration overlay with these parameters. Vibration commands from pattern or streaming will be ignored false vibration_amplitude number 0.0 - 5.0 amplitude of a vibration overlay, 0.0 == off truncated into range vibration_frequency number 10.0 - 50.0 frequency in HZ of the vibration overlay truncated into range Command Description \"STOP\" Stops the machine instantly \"retract\" Moves the endeffector to the far end (home position) with a safe speed \"depth\" Retracts the motor to the home position with the ease-in speed. This is the default state after the motor is homed. \"stroke\" Moves the motor to the depth-stroke position a.k.a. the start of the stroke with the ease-in speed. Whenever the parameter stroke is changed, the motor will move to the new depth-stroke. \"playpattern\" Starts the pattern generator and runs the pattern. \"strokestream\" Starts the stream input and interprets them as trapezoidal moves with 1/3 acceleration, 1/3 constant speed and 1/3 deceleration. The stream input is interpreted as relative positions on the scale [0.0 - 1.0] and mapped to [depth, depth-stroke]. \"positionstream Starts the stream input and interprets them as relative positions on the scale [0.0 - 1.0] and maps them to [depth, depth-stroke]."},{"location":"lustmotion-API/#json","title":"JSON","text":"<pre><code>{\n    \"command\": \"STOP\",\n    \"depth\": 120.0,\n    \"stroke\": 80.5,\n    \"rate\": 30.0,\n    \"sensation\": 0.0,\n    \"pattern\": \"Deeper\",\n    \"vibration_override\": false,\n    \"vibration_amplitude\": 0.0,\n    \"vibration_frequency\": 25.0\n}\n</code></pre>"},{"location":"lustmotion-API/#strokeengine-safety-limits","title":"StrokeEngine Safety Limits","text":"<p>This API can be used to restrict the mechanical reach of the machine and limit the maximum speed attainable. These soft limits will be used to truncate any control value coming through the Control API or the streaming interface.</p> <p>Defined in <code>StrokeEngineSafetyService.h</code></p> Method URL Authentication GET /rest/safety <code>NONE_REQUIRED</code> POST /rest/safety <code>NONE_REQUIRED</code> Parameter Type Range Info Failure Mode depth_limit number 0.0 - <code>depth</code> maximum depth of the motion truncated into range stroke_limit number 0.0 - <code>depth</code> length of the stroke truncated into range rate_limit number 0.5 - 600 maximum rate the machine is limited to truncated into range velocity_limit number 0.0 - <code>max_velocity</code> velocity limit in mm/s for regular moves. Vibration is not affected by this limit truncated into range heartbeat_mode number 0 - 1 selects the heartbeat mode and how to enter safestate if a client looses connection 1 ease_in_speed number 0.0 - 30.0 velocity in mm/s to ease in changes in stroke or depth or move to predefined depths truncated into range"},{"location":"lustmotion-API/#heart-beat-mode","title":"Heart Beat Mode","text":"Number Heartbeat Mode Description 0 \"none\" Heartbeat disabled 1 \"any\" Enter safestate if one connections drops 2 \"last\" Enter safestate when last connection drops <p>A client can safely disconnect if the machine is in standstill and any motion input disabled.</p>"},{"location":"lustmotion-API/#json_1","title":"JSON","text":"<pre><code>{\n    \"depth_limit\": 120.0,\n    \"stroke_limit\": 80.5,\n    \"rate_limit\": 30.0,\n    \"heartbeat_mode\": 0,\n    \"ease_in_speed\": 5.0\n}\n</code></pre>"},{"location":"lustmotion-API/#strokeengine-environment-read-only","title":"StrokeEngine Environment read-only","text":"<p>This API will provide the information about the environment like maximum travel or maximum speed. This can be used by the UI to scale UI elements according to the machines real physical properties.</p> <p>Defined in <code>StrokeEngineEnvironmentService.h</code></p> Method URL Authentication GET /rest/environment <code>NONE_REQUIRED</code> MQTT - N/A Parameter Type Info depth number maximum travel of the machine. Used for depth and stroke max_rate number maximum rate in FPM that the machine is capable max_velocity number maximum velocity in mm/s. Given by the maximum RPM and the gearing ratio. heartbeat_mode number heartbeat mode. If &gt; 0 the control message must be sent every second, regardless wether it has changed patterns array of strings array of all available pattern names valueA string Label of the valueA data stream valueB string Label of the valueB data stream motor string Which motor driver is loaded: <code>VIRTUAL</code>, <code>GENERIC_STEPPER</code>, <code>OSSM_REF_BOARD_V2</code> or <code>IHSV_SERVO_V6</code>"},{"location":"lustmotion-API/#json_2","title":"JSON","text":"<pre><code>{\n    \"depth\": 150.0,\n    \"max_rate\": 30.0,\n    \"heartbeat_mode\": 1,\n    \"pattern\": [\"Depth Adjustment\", \"Streaming\", \"Pounding or Teasing\", \"Robo Stroke\"],\n    \"valueA\" : \"Real Position\",\n    \"valueB\" : \"Torque\",\n    \"motor\" : \"IHSV_SERVO_V6\"\n}\n</code></pre>"},{"location":"lustmotion-API/#mqtt","title":"MQTT","text":"<p>Environment messages are always send with the flag <code>retain</code> and QoS = 1 to make it available for all new consumers. Environment messages are sent out whenever it connects to the broker or the topic is reconfigured. Additionally a MQTT client may request an environment JSON by sending a payload with \"environment\" to the environment topic.</p>"},{"location":"lustmotion-API/#strokeengine-streaming-write-only","title":"StrokeEngine Streaming write-only","text":"<p>Instead of pattern the motion commands can be provided via this streaming interface, too. Messages are queued up with a queue length of 5. Writing to a full queue will result in the message being discarded. An empty queue will stop the motion. Changing <code>command</code> in the Control API will erase the queue. That way streaming always starts with a fresh queue. This service is write only. Changes won't propagate to other clients and a GET request will return an empty JSON.</p> <p>Defined in <code>StrokeEngineStreamingService.h</code></p> Method URL Authentication POST /rest/streaming <code>NONE_REQUIRED</code> WS /ws/streaming <code>NONE_REQUIRED</code> MQTT - /N/A Parameter Type Range Info Failure Mode stroke number 0.0 - 1.0 relative length of the stroke, mapped to the true stroke length set by the control message truncated into range duration number 0.0 - 60.0 duration of the stroke in seconds truncated into range vibration_amplitude number 0.0 - 5.0 amplitude of a vibration overlay, 0.0 == off truncated into range or 0.0 vibration_frequency number 10.0 - 50.0 frequency in HZ of the vibration overlay truncated into range"},{"location":"lustmotion-API/#json_3","title":"JSON","text":"<pre><code>{\n    \"stroke\": 0.85,\n    \"duration\": 2.21,\n    \"vibration_amplitude\": 0.0,\n    \"vibration_frequency\": 25.0\n}\n</code></pre>"},{"location":"lustmotion-API/#motor-configuration","title":"Motor Configuration","text":"<p>This REST endpoint configures the motor driver and important parameters during runtime. It starts with the <code>VIRTUAL</code> driver by default. The available driver depend on the hardware and build target.</p> <p>Defined in <code>MotorConfigurationService.h</code></p> Method URL Authentication GET /rest/motorConfig <code>IS_ADMIN</code> POST /rest/motorConfig <code>IS_ADMIN</code> Parameter Type Info driver string must match one of the available motor drivers <code>VIRTUAL</code>, <code>GENERIC_STEPPER</code>, <code>OSSM_REF_BOARD_V2</code> or <code>IHSV_SERVO_V6</code> driver_list array of strings A list of all available motor drivers for this particular build / board steps_per_rev number How many steps the motor turns per revolution max_rpm number Maximum RPM of the motor max_acceleration number Maximum acceleration in [mm/s\u00b2] pulley_teeth number Number of teeth on the pulley assuming a GT2 belt invert_direction boolean can be used to change the direction of the machine measure_travel boolean if set to <code>true</code> will initiate a measurement, if it is within the capabilities of the driver home boolean if set to <code>true</code> it will initiate a homing cycle travel number The mechanical travel from one endstop to the other keepout number Soft endstop distance from hard endstop away. In mm on both sides sensorless_trigger number Trigger value for sensorless homing in % of rated torque or rated current"},{"location":"lustmotion-API/#json_4","title":"JSON","text":"<pre><code>{\n    \"driver\": \"IHSV_SERVO_V6\",\n    \"driver_list\": [\"VIRTUAL\", \"GENERIC_STEPPER\", \"OSSM_REF_BOARD_V2\", \"IHSV_SERVO_V6\"],\n    \"steps_per_rev\": 2000,\n    \"max_rpm\": 3000,\n    \"max_acceleration\": 100000,\n    \"pulley_teeth\": 20,\n    \"invert_direction\": false,\n    \"measure_travel\": false,\n    \"home\": false,\n    \"travel\": 160,\n    \"keepout\": 5.0,\n    \"sensorless_trigger\": 20,\n}\n</code></pre>"},{"location":"lustmotion-API/#websocket-raw-data-streaming","title":"Websocket Raw Data Streaming","text":"<p>Defined in <code>WebSocketRawDataStreaming.h</code></p> <p>A constant stream of position, velocity and other parameters are available on a websocket connection. These values are send in a binary CBOR format and contain an array of several data points for a given time slot. The binary format is chosen to save bandwidth and typically 5 data points are aggregated into one message to reduce the message rate. This can be used as a direct user feedback of what is happening with the machine.</p> Method URL Authentication GET /ws/rawPosition <code>NONE_REQUIRED</code> Parameter Type Info time unsigned int time in milliseconds since device started position float the real-time position in [mm] speed float the real-time velocity in [mm/s] valueA float An analog value the motor driver can send. e.g. current, force or torque valueB float An analog value the motor driver can send. e.g. current, force or torque"},{"location":"lustmotion-API/#server-sent-events","title":"Server Sent Events","text":"<p>The current motor state is updated every 500ms via SSE events. The following events are available:</p> Event Message Info motor_homed \"true\" / \"false\" Wether the motor is currently homed or not motor_error \"true\" / \"false\" Wether the motor is currently in error state or not"},{"location":"lustmotion-config/","title":"Initial Setup &amp; Configuration","text":""},{"location":"lustmotion-config/#connect-to-wifi","title":"Connect to WiFi","text":""},{"location":"lustmotion-config/#add-networks","title":"Add Networks","text":""},{"location":"lustmotion-config/#scan-for-networks","title":"Scan for Networks","text":""},{"location":"lustmotion-config/#connection-preference","title":"Connection Preference","text":""},{"location":"lustmotion-config/#static-ip-configuration","title":"Static IP Configuration","text":""},{"location":"lustmotion-config/#wifi-ap-mode","title":"WiFi AP Mode","text":""},{"location":"lustmotion-config/#time-zone","title":"Time Zone","text":""},{"location":"lustmotion-config/#motor-configuration","title":"Motor Configuration","text":""},{"location":"lustmotion-config/#motor-driver","title":"Motor Driver","text":""},{"location":"lustmotion-config/#virtual","title":"Virtual","text":""},{"location":"lustmotion-config/#generic-stepper","title":"Generic Stepper","text":""},{"location":"lustmotion-config/#ossm-reference-board-v2","title":"OSSM Reference Board V2","text":""},{"location":"lustmotion-config/#gearing","title":"Gearing","text":""},{"location":"lustmotion-config/#travel","title":"Travel","text":""},{"location":"lustmotion-config/#sensorless-homing","title":"Sensorless Homing","text":""},{"location":"lustmotion-connectivity/","title":"Connectivity","text":""},{"location":"lustmotion-connectivity/#mqtt","title":"MQTT","text":""},{"location":"lustmotion-connectivity/#rest-api-websocket","title":"REST API &amp; Websocket","text":""},{"location":"lustmotion-contribute/","title":"Contribute","text":""},{"location":"lustmotion-contribute/#contribute-a-pattern","title":"Contribute a Pattern","text":"<p>Making your own pattern is not that hard. They can be found in the header only pattern.h and easily extended.</p>"},{"location":"lustmotion-contribute/#subclass-pattern-in-patternh","title":"Subclass Pattern in pattern.h","text":"<p>To create a new pattern just subclass from <code>class Pattern</code>. Have a look at <code>class SimpleStroke</code> for the most basic implementation:</p> <pre><code>class SimpleStroke : public Pattern {\n    public:\n        SimpleStroke(const char *str) : Pattern(str) {}\n</code></pre> <p>Add the constructor to store the patterns name string.</p> <p>Reimplement set-functions if you need them to do some math:</p> <pre><code>        void setTimeOfStroke(float speed = 0) {\n             // In &amp; Out have same time, so we need to divide by 2\n            _timeOfStroke = 0.5 * speed;\n        }\n</code></pre> <p>Reimplement the core function <code>motionParameter nextTarget(unsigned int index)</code>. This is mandatory, as the StrokeEngine will call this function after each stroke to get the next set of <code>motionParameter</code>. Each time this function is called the <code>index</code> increments by 1. If the pattern is called the very first time this always starts as 0. This can be used to create pattern that vary over time:</p> <pre><code>        motionParameter nextTarget(unsigned int index) {\n            // maximum speed of the trapezoidal motion\n            _nextMove.speed = int(1.5 * _stroke/_timeOfStroke);\n\n            // acceleration to meet the profile\n            _nextMove.acceleration = int(3.0 * _nextMove.speed/_timeOfStroke);\n\n            // odd stroke is moving out\n            if (index % 2) {\n                _nextMove.stroke = 0;\n\n            // even stroke is moving in\n            } else {\n                _nextMove.stroke = _stroke;\n            }\n\n            _index = index;\n            return _nextMove;\n        }\n};\n</code></pre> <p>If you need further helper functions and variables use the <code>protected:</code> section to implement them.</p> <p>Don't forget to add an instance of your new pattern class at the very bottom of the file to the <code>*patternTable[]</code>-Array.</p> <pre><code>static Pattern *patternTable[] = {\n  new SimpleStroke(\"Simple Stroke\"),\n  new TeasingPounding(\"Teasing or Pounding\")\n  // &lt;-- insert your new pattern class here!\n };\n</code></pre>"},{"location":"lustmotion-contribute/#pauses","title":"Pauses","text":"<p>It is possible for a pattern to insert pauses between strokes. The main stroking-thread of StrokeEngine will poll a new set of motion commands every few milliseconds once the target position of the last stroke is reached. If a pattern returns the motion parameter <code>_nextMove.skip = true;</code> inside the costume implementation of the <code>nextTarget()</code>-function no new motion is started. Instead it is polled again later. This allows to compare <code>millis()</code> inside a pattern. To make this more convenient the <code>Pattern</code> base class implements 3 private functions: <code>void _startDelay()</code>, <code>void _updateDelay(int delayInMillis)</code> and <code>bool _isStillDelayed()</code>. <code>_startDelay()</code> will start the delay and <code>_updateDelay(int delayInMillis)</code> will set the desired pause in milliseconds. <code>_updateDelay()</code> can be updated any time with a new value. If a stroke becomes overdue it is executed immediately. <code>bool _isStillDelayed()</code> is just a wrapper for comparing the current time with the scheduled time. Can be used inside the <code>nextTarget()</code>-function to indicate whether StrokeEngine should be advised to skip this step by returning <code>_nextMove.skip = true;</code>. See the pattern Stop'n'Go for an example on how to use this mechanism.</p>"},{"location":"lustmotion-contribute/#expected-behavior","title":"Expected Behavior","text":""},{"location":"lustmotion-contribute/#adhere-to-depth-stroke-at-all-times","title":"Adhere to Depth &amp; Stroke at All Times","text":"<p>Depth and Stroke set in StrokeEngine are axiomatic. StrokeEngine closely monitors the returned <code>motionParameter</code> and ensures no violation against the machines physics were returned. Pattern only return a stroke information which is offset by depth in the StrokeEngine. Your return value may be anywhere in the interval [0, stroke]. Positions outside the interval [depth - stroke, depth] will be truncated, leading to a distortion of your intended stroke profile. This is an integral safety feature to prevent injuries. This sets the envelope the pattern may use. Similar for speed a.k.a. timeOfStroke.</p>"},{"location":"lustmotion-contribute/#use-index-properly","title":"Use <code>index</code> Properly","text":"<p><code>index</code> provides further information then just the stroke count:</p> <ul> <li>It always starts at <code>0</code> if a pattern is called the first time. It resets with every call of <code>StrokeEngine.setPattern(int)</code> or <code>StrokeEngine.startMotion()</code>.</li> <li>It increments after each successfully executed move.</li> <li>Store the last index in <code>_index</code> before returning. By comparing <code>index == _index</code> you can determine that this time it is not a new stroke, but rather an update of a current stroke. This information can be handy in pattern varying over time.</li> </ul>"},{"location":"lustmotion-getstarted/","title":"Get Started with LUST-motion","text":"<p>LUST-motion is a control firmware for fucking machines controlled by an ESP32 using a stepper or servo motor. It is especially geared towards OSSM and runs on the OSSM Reference Board V1 and V2 sold by Research and Desire. But the flexible structure of the code allow easy adaptation to different PCB's. It can work with any stepper or servo motor which accepts the STEP/DIR interface out of the box. However, it is easily possible to extend this to other drivers like linmot linear motors.</p>"},{"location":"lustmotion-getstarted/#install-the-firmware","title":"Install the Firmware","text":""},{"location":"lustmotion-usage/","title":"Safe Usage","text":""},{"location":"lustmotion-usage/#main-controls","title":"Main Controls","text":""},{"location":"lustmotion-usage/#depth","title":"Depth","text":""},{"location":"lustmotion-usage/#stroke","title":"Stroke","text":""},{"location":"lustmotion-usage/#speed","title":"Speed","text":""},{"location":"lustmotion-usage/#sensation","title":"Sensation","text":""},{"location":"lustmotion-usage/#speed-preference","title":"Speed Preference","text":""},{"location":"lustmotion-usage/#fixed-positions","title":"Fixed Positions","text":""},{"location":"lustmotion-usage/#pattern","title":"Pattern","text":"<p>Patterns are what set LUST-motion apart. They allow to bring a lot of variety into play. Pattern are small programs that StrokeEngine is using to create the next set of trapezoidal motion parameter (Target Position, Speed &amp; Acceleration).</p>"},{"location":"lustmotion-usage/#teasing-or-pounding","title":"Teasing or Pounding","text":"<p>The sensation value can change the speed ratio between in and out. Sensation &gt; 0 makes the in-move faster (up to 5x) giving a hard pounding sensation. Values &lt; 0 make the out-move going faster. This gives a more pleasing sensation. The time for the overall stroke remains always the same and only depends on the global speed parameter.</p>"},{"location":"lustmotion-usage/#robo-stroke","title":"Robo Stroke","text":"<p>Sensation controls the acceleration of the stroke. Positive value increase acceleration until it is a constant speed motion (feels robotic). Neutral is equal to simple stroke (1/3, 1/3, 1/3). Negative reduces acceleration into a triangle profile.</p>"},{"location":"lustmotion-usage/#halfnhalf","title":"Half'n'Half","text":"<p>Similar to Teasing or Pounding, but every second stroke is only half the depth. The sensation value can change the speed ratio between in and out. Sensation &gt; 0 make the in move faster (up to 5x) giving a hard pounding sensation. Values &lt; 0 make the out move going faster. This gives a more pleasing sensation. The time for the overall stroke remains the same for all strokes, even half ones.</p>"},{"location":"lustmotion-usage/#deeper","title":"Deeper","text":"<p>The insertion depth ramps up gradually with each stroke until it reaches its maximum. It then resets and restarts. Sensations controls how many strokes there are in a ramp.</p>"},{"location":"lustmotion-usage/#stopngo","title":"Stop'n'Go","text":"<p>Pauses between a series of strokes. The number of strokes ramps from 1 stroke to 5 strokes and back. Sensation changes the length of the pauses between stroke series.</p>"},{"location":"lustmotion-usage/#insist","title":"Insist","text":"<p>Sensation reduces the effective stroke length while keeping the stroke speed constant to the full stroke. This creates interesting vibrational pattern at higher sensation values. With positive sensation the strokes will wander towards the front, with negative values towards the back.</p>"},{"location":"lustmotion-usage/#random-depth","title":"Random Depth","text":"<p>The depth of the stroke is random. The velocity is kept constant, so that shorter stroke will have a higher than nominal rate. Sensation changes the ration between in- and out-speed.</p>"},{"location":"lustmotion-usage/#safety-settings","title":"Safety Settings","text":""},{"location":"lustmotion-usage/#range-limit","title":"Range Limit","text":""},{"location":"lustmotion-usage/#velocity-limit","title":"Velocity Limit","text":""},{"location":"lustmotion-usage/#heartbeat-mode","title":"Heartbeat Mode","text":""},{"location":"lust-remote/lustremote-firmware/","title":"Web Flasher","text":""},{"location":"lust-remote/lustremote-firmware/#web-flasher","title":"Web Flasher","text":"<p>Flash or Find your devices using next options:</p> <ol> <li>Plug in your M5 Core2 or your OSSM to a USB port.</li> <li>If your device is not Recognices install ESP32 USB Driver CP210x</li> <li>Hit \"Install\" and select the correct COM port.</li> <li>Get LUST-Remote and OSSM firmware installed and connected in less than 3 minutes!</li> </ol> <p>Select your product</p> <ul> <li> LUST-Remote With 100mAh Battery (Stock) V2.1.0 </li> <li> LUST-Remote With 1000mAh Battery Recomended in BOM V2.1.0 </li> <li> LUST-Remote Core S3 With 1000mAh Battery Recomended in BOM V2.1.1 </li> <li> OSSM-Stroke HW v1.1 Board 2000 Steps (Fixed Rail Length 150mm) </li> <li> OSSM-Stroke HW v2.2 Board 2000 Steps(Sensorless Homing) </li> <li> OSSM-Stroke HW v2.2 Board 800 Steps (Gold and Prebuild motor) </li> </ul> <p> INSTALL Use Chrome Desktop Not allowed to use this on HTTP! </p> <p>Powered by ESP Web Tools</p>"}]}